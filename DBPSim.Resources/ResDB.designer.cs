#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBPSim.Resources
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Resources")]
	public partial class ResDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivity(Activity instance);
    partial void UpdateActivity(Activity instance);
    partial void DeleteActivity(Activity instance);
    partial void InsertResourceKindAttribute(ResourceKindAttribute instance);
    partial void UpdateResourceKindAttribute(ResourceKindAttribute instance);
    partial void DeleteResourceKindAttribute(ResourceKindAttribute instance);
    partial void InsertAttribute(Attribute instance);
    partial void UpdateAttribute(Attribute instance);
    partial void DeleteAttribute(Attribute instance);
    partial void InsertConsumedResourceAttribute(ConsumedResourceAttribute instance);
    partial void UpdateConsumedResourceAttribute(ConsumedResourceAttribute instance);
    partial void DeleteConsumedResourceAttribute(ConsumedResourceAttribute instance);
    partial void InsertConsumeType(ConsumeType instance);
    partial void UpdateConsumeType(ConsumeType instance);
    partial void DeleteConsumeType(ConsumeType instance);
    partial void InsertProcess(Process instance);
    partial void UpdateProcess(Process instance);
    partial void DeleteProcess(Process instance);
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    partial void InsertResourceAllocation(ResourceAllocation instance);
    partial void UpdateResourceAllocation(ResourceAllocation instance);
    partial void DeleteResourceAllocation(ResourceAllocation instance);
    partial void InsertResourceAttribute(ResourceAttribute instance);
    partial void UpdateResourceAttribute(ResourceAttribute instance);
    partial void DeleteResourceAttribute(ResourceAttribute instance);
    partial void InsertResourceKind(ResourceKind instance);
    partial void UpdateResourceKind(ResourceKind instance);
    partial void DeleteResourceKind(ResourceKind instance);
    #endregion
		
		public ResDBDataContext() : 
				base("Data Source=WIN-11CHAUOTV7M\\SQLEXPRESS;Initial Catalog=Resources;Integrated Secur" +
						"ity=True", mappingSource)
		{
			OnCreated();
		}
		
		public ResDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ResDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ResDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ResDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Activity> Activities
		{
			get
			{
				return this.GetTable<Activity>();
			}
		}
		
		public System.Data.Linq.Table<ResourceKindAttribute> ResourceKindAttributes
		{
			get
			{
				return this.GetTable<ResourceKindAttribute>();
			}
		}
		
		public System.Data.Linq.Table<Attribute> Attributes
		{
			get
			{
				return this.GetTable<Attribute>();
			}
		}
		
		public System.Data.Linq.Table<ConsumedResourceAttribute> ConsumedResourceAttributes
		{
			get
			{
				return this.GetTable<ConsumedResourceAttribute>();
			}
		}
		
		public System.Data.Linq.Table<ConsumeType> ConsumeTypes
		{
			get
			{
				return this.GetTable<ConsumeType>();
			}
		}
		
		public System.Data.Linq.Table<Process> Processes
		{
			get
			{
				return this.GetTable<Process>();
			}
		}
		
		public System.Data.Linq.Table<Resource> Resources
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
		
		public System.Data.Linq.Table<ResourceAllocation> ResourceAllocations
		{
			get
			{
				return this.GetTable<ResourceAllocation>();
			}
		}
		
		public System.Data.Linq.Table<ResourceAttribute> ResourceAttributes
		{
			get
			{
				return this.GetTable<ResourceAttribute>();
			}
		}
		
		public System.Data.Linq.Table<ResourceKind> ResourceKinds
		{
			get
			{
				return this.GetTable<ResourceKind>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activity")]
	public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Process_ID;
		
		private string _Title;
		
		private EntitySet<ResourceAllocation> _ResourceAllocations;
		
		private EntityRef<Process> _Process;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProcess_IDChanging(System.Nullable<int> value);
    partial void OnProcess_IDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Activity()
		{
			this._ResourceAllocations = new EntitySet<ResourceAllocation>(new Action<ResourceAllocation>(this.attach_ResourceAllocations), new Action<ResourceAllocation>(this.detach_ResourceAllocations));
			this._Process = default(EntityRef<Process>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Process_ID", DbType="Int")]
		public System.Nullable<int> Process_ID
		{
			get
			{
				return this._Process_ID;
			}
			set
			{
				if ((this._Process_ID != value))
				{
					if (this._Process.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcess_IDChanging(value);
					this.SendPropertyChanging();
					this._Process_ID = value;
					this.SendPropertyChanged("Process_ID");
					this.OnProcess_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_ResourceAllocation", Storage="_ResourceAllocations", ThisKey="ID", OtherKey="Activity_ID")]
		public EntitySet<ResourceAllocation> ResourceAllocations
		{
			get
			{
				return this._ResourceAllocations;
			}
			set
			{
				this._ResourceAllocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Process_Activity", Storage="_Process", ThisKey="Process_ID", OtherKey="ID", IsForeignKey=true)]
		public Process Process
		{
			get
			{
				return this._Process.Entity;
			}
			set
			{
				Process previousValue = this._Process.Entity;
				if (((previousValue != value) 
							|| (this._Process.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Process.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._Process.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._Process_ID = value.ID;
					}
					else
					{
						this._Process_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Process");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceAllocations(ResourceAllocation entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_ResourceAllocations(ResourceAllocation entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceKindAttribute")]
	public partial class ResourceKindAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Attribute_ID;
		
		private System.Nullable<int> _ResourceKind_ID;
		
		private string _Value;
		
		private string _dimension;
		
		private EntityRef<Attribute> _Attribute;
		
		private EntityRef<ResourceKind> _ResourceKind;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAttribute_IDChanging(System.Nullable<int> value);
    partial void OnAttribute_IDChanged();
    partial void OnResourceKind_IDChanging(System.Nullable<int> value);
    partial void OnResourceKind_IDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OndimensionChanging(string value);
    partial void OndimensionChanged();
    #endregion
		
		public ResourceKindAttribute()
		{
			this._Attribute = default(EntityRef<Attribute>);
			this._ResourceKind = default(EntityRef<ResourceKind>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attribute_ID", DbType="Int")]
		public System.Nullable<int> Attribute_ID
		{
			get
			{
				return this._Attribute_ID;
			}
			set
			{
				if ((this._Attribute_ID != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttribute_IDChanging(value);
					this.SendPropertyChanging();
					this._Attribute_ID = value;
					this.SendPropertyChanged("Attribute_ID");
					this.OnAttribute_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceKind_ID", DbType="Int")]
		public System.Nullable<int> ResourceKind_ID
		{
			get
			{
				return this._ResourceKind_ID;
			}
			set
			{
				if ((this._ResourceKind_ID != value))
				{
					if (this._ResourceKind.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceKind_IDChanging(value);
					this.SendPropertyChanging();
					this._ResourceKind_ID = value;
					this.SendPropertyChanged("ResourceKind_ID");
					this.OnResourceKind_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dimension", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string dimension
		{
			get
			{
				return this._dimension;
			}
			set
			{
				if ((this._dimension != value))
				{
					this.OndimensionChanging(value);
					this.SendPropertyChanging();
					this._dimension = value;
					this.SendPropertyChanged("dimension");
					this.OndimensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_ResourceKindAttribute", Storage="_Attribute", ThisKey="Attribute_ID", OtherKey="ID", IsForeignKey=true)]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.ResourceKindAttributes.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.ResourceKindAttributes.Add(this);
						this._Attribute_ID = value.ID;
					}
					else
					{
						this._Attribute_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceKind_ResourceKindAttribute", Storage="_ResourceKind", ThisKey="ResourceKind_ID", OtherKey="ID", IsForeignKey=true)]
		public ResourceKind ResourceKind
		{
			get
			{
				return this._ResourceKind.Entity;
			}
			set
			{
				ResourceKind previousValue = this._ResourceKind.Entity;
				if (((previousValue != value) 
							|| (this._ResourceKind.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceKind.Entity = null;
						previousValue.ResourceKindAttributes.Remove(this);
					}
					this._ResourceKind.Entity = value;
					if ((value != null))
					{
						value.ResourceKindAttributes.Add(this);
						this._ResourceKind_ID = value.ID;
					}
					else
					{
						this._ResourceKind_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourceKind");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attribute")]
	public partial class Attribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private EntitySet<ResourceKindAttribute> _ResourceKindAttributes;
		
		private EntitySet<ResourceAttribute> _ResourceAttributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Attribute()
		{
			this._ResourceKindAttributes = new EntitySet<ResourceKindAttribute>(new Action<ResourceKindAttribute>(this.attach_ResourceKindAttributes), new Action<ResourceKindAttribute>(this.detach_ResourceKindAttributes));
			this._ResourceAttributes = new EntitySet<ResourceAttribute>(new Action<ResourceAttribute>(this.attach_ResourceAttributes), new Action<ResourceAttribute>(this.detach_ResourceAttributes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_ResourceKindAttribute", Storage="_ResourceKindAttributes", ThisKey="ID", OtherKey="Attribute_ID")]
		public EntitySet<ResourceKindAttribute> ResourceKindAttributes
		{
			get
			{
				return this._ResourceKindAttributes;
			}
			set
			{
				this._ResourceKindAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_ResourceAttribute", Storage="_ResourceAttributes", ThisKey="ID", OtherKey="Attribute_ID")]
		public EntitySet<ResourceAttribute> ResourceAttributes
		{
			get
			{
				return this._ResourceAttributes;
			}
			set
			{
				this._ResourceAttributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceKindAttributes(ResourceKindAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_ResourceKindAttributes(ResourceKindAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
		
		private void attach_ResourceAttributes(ResourceAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_ResourceAttributes(ResourceAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConsumedResourceAttribute")]
	public partial class ConsumedResourceAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ConsumeType_ID;
		
		private System.Nullable<int> _ResourceAllocation_ID;
		
		private int _Amount;
		
		private EntitySet<ResourceAttribute> _ResourceAttributes;
		
		private EntityRef<ConsumeType> _ConsumeType;
		
		private EntityRef<ResourceAllocation> _ResourceAllocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnConsumeType_IDChanging(System.Nullable<int> value);
    partial void OnConsumeType_IDChanged();
    partial void OnResourceAllocation_IDChanging(System.Nullable<int> value);
    partial void OnResourceAllocation_IDChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public ConsumedResourceAttribute()
		{
			this._ResourceAttributes = new EntitySet<ResourceAttribute>(new Action<ResourceAttribute>(this.attach_ResourceAttributes), new Action<ResourceAttribute>(this.detach_ResourceAttributes));
			this._ConsumeType = default(EntityRef<ConsumeType>);
			this._ResourceAllocation = default(EntityRef<ResourceAllocation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsumeType_ID", DbType="Int")]
		public System.Nullable<int> ConsumeType_ID
		{
			get
			{
				return this._ConsumeType_ID;
			}
			set
			{
				if ((this._ConsumeType_ID != value))
				{
					if (this._ConsumeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConsumeType_IDChanging(value);
					this.SendPropertyChanging();
					this._ConsumeType_ID = value;
					this.SendPropertyChanged("ConsumeType_ID");
					this.OnConsumeType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceAllocation_ID", DbType="Int")]
		public System.Nullable<int> ResourceAllocation_ID
		{
			get
			{
				return this._ResourceAllocation_ID;
			}
			set
			{
				if ((this._ResourceAllocation_ID != value))
				{
					if (this._ResourceAllocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceAllocation_IDChanging(value);
					this.SendPropertyChanging();
					this._ResourceAllocation_ID = value;
					this.SendPropertyChanged("ResourceAllocation_ID");
					this.OnResourceAllocation_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConsumedResourceAttribute_ResourceAttribute", Storage="_ResourceAttributes", ThisKey="ID", OtherKey="ConsumedResourceAttribute_ID")]
		public EntitySet<ResourceAttribute> ResourceAttributes
		{
			get
			{
				return this._ResourceAttributes;
			}
			set
			{
				this._ResourceAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConsumeType_ConsumedResourceAttribute", Storage="_ConsumeType", ThisKey="ConsumeType_ID", OtherKey="ID", IsForeignKey=true)]
		public ConsumeType ConsumeType
		{
			get
			{
				return this._ConsumeType.Entity;
			}
			set
			{
				ConsumeType previousValue = this._ConsumeType.Entity;
				if (((previousValue != value) 
							|| (this._ConsumeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConsumeType.Entity = null;
						previousValue.ConsumedResourceAttributes.Remove(this);
					}
					this._ConsumeType.Entity = value;
					if ((value != null))
					{
						value.ConsumedResourceAttributes.Add(this);
						this._ConsumeType_ID = value.ID;
					}
					else
					{
						this._ConsumeType_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ConsumeType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceAllocation_ConsumedResourceAttribute", Storage="_ResourceAllocation", ThisKey="ResourceAllocation_ID", OtherKey="ID", IsForeignKey=true)]
		public ResourceAllocation ResourceAllocation
		{
			get
			{
				return this._ResourceAllocation.Entity;
			}
			set
			{
				ResourceAllocation previousValue = this._ResourceAllocation.Entity;
				if (((previousValue != value) 
							|| (this._ResourceAllocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceAllocation.Entity = null;
						previousValue.ConsumedResourceAttributes.Remove(this);
					}
					this._ResourceAllocation.Entity = value;
					if ((value != null))
					{
						value.ConsumedResourceAttributes.Add(this);
						this._ResourceAllocation_ID = value.ID;
					}
					else
					{
						this._ResourceAllocation_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourceAllocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceAttributes(ResourceAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ConsumedResourceAttribute = this;
		}
		
		private void detach_ResourceAttributes(ResourceAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ConsumedResourceAttribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConsumeType")]
	public partial class ConsumeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private EntitySet<ConsumedResourceAttribute> _ConsumedResourceAttributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public ConsumeType()
		{
			this._ConsumedResourceAttributes = new EntitySet<ConsumedResourceAttribute>(new Action<ConsumedResourceAttribute>(this.attach_ConsumedResourceAttributes), new Action<ConsumedResourceAttribute>(this.detach_ConsumedResourceAttributes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConsumeType_ConsumedResourceAttribute", Storage="_ConsumedResourceAttributes", ThisKey="ID", OtherKey="ConsumeType_ID")]
		public EntitySet<ConsumedResourceAttribute> ConsumedResourceAttributes
		{
			get
			{
				return this._ConsumedResourceAttributes;
			}
			set
			{
				this._ConsumedResourceAttributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConsumedResourceAttributes(ConsumedResourceAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ConsumeType = this;
		}
		
		private void detach_ConsumedResourceAttributes(ConsumedResourceAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ConsumeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Process")]
	public partial class Process : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private EntitySet<Activity> _Activities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Process()
		{
			this._Activities = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities), new Action<Activity>(this.detach_Activities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Process_Activity", Storage="_Activities", ThisKey="ID", OtherKey="Process_ID")]
		public EntitySet<Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Process = this;
		}
		
		private void detach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Process = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Resource")]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ResourceKind_ID;
		
		private string _Title;
		
		private decimal _Price_per_hour;
		
		private System.DateTime _Accessible_From;
		
		private System.Nullable<System.DateTime> _Accessible_Untill;
		
		private EntitySet<ResourceAllocation> _ResourceAllocations;
		
		private EntitySet<ResourceAllocation> _ResourceAllocations1;
		
		private EntitySet<ResourceAttribute> _ResourceAttributes;
		
		private EntityRef<ResourceKind> _ResourceKind;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnResourceKind_IDChanging(System.Nullable<int> value);
    partial void OnResourceKind_IDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPrice_per_hourChanging(decimal value);
    partial void OnPrice_per_hourChanged();
    partial void OnAccessible_FromChanging(System.DateTime value);
    partial void OnAccessible_FromChanged();
    partial void OnAccessible_UntillChanging(System.Nullable<System.DateTime> value);
    partial void OnAccessible_UntillChanged();
    #endregion
		
		public Resource()
		{
			this._ResourceAllocations = new EntitySet<ResourceAllocation>(new Action<ResourceAllocation>(this.attach_ResourceAllocations), new Action<ResourceAllocation>(this.detach_ResourceAllocations));
			this._ResourceAllocations1 = new EntitySet<ResourceAllocation>(new Action<ResourceAllocation>(this.attach_ResourceAllocations1), new Action<ResourceAllocation>(this.detach_ResourceAllocations1));
			this._ResourceAttributes = new EntitySet<ResourceAttribute>(new Action<ResourceAttribute>(this.attach_ResourceAttributes), new Action<ResourceAttribute>(this.detach_ResourceAttributes));
			this._ResourceKind = default(EntityRef<ResourceKind>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceKind_ID", DbType="Int")]
		public System.Nullable<int> ResourceKind_ID
		{
			get
			{
				return this._ResourceKind_ID;
			}
			set
			{
				if ((this._ResourceKind_ID != value))
				{
					if (this._ResourceKind.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceKind_IDChanging(value);
					this.SendPropertyChanging();
					this._ResourceKind_ID = value;
					this.SendPropertyChanged("ResourceKind_ID");
					this.OnResourceKind_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Price per hour]", Storage="_Price_per_hour", DbType="Money NOT NULL")]
		public decimal Price_per_hour
		{
			get
			{
				return this._Price_per_hour;
			}
			set
			{
				if ((this._Price_per_hour != value))
				{
					this.OnPrice_per_hourChanging(value);
					this.SendPropertyChanging();
					this._Price_per_hour = value;
					this.SendPropertyChanged("Price_per_hour");
					this.OnPrice_per_hourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accessible_From", DbType="DateTime NOT NULL")]
		public System.DateTime Accessible_From
		{
			get
			{
				return this._Accessible_From;
			}
			set
			{
				if ((this._Accessible_From != value))
				{
					this.OnAccessible_FromChanging(value);
					this.SendPropertyChanging();
					this._Accessible_From = value;
					this.SendPropertyChanged("Accessible_From");
					this.OnAccessible_FromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accessible_Untill", DbType="DateTime")]
		public System.Nullable<System.DateTime> Accessible_Untill
		{
			get
			{
				return this._Accessible_Untill;
			}
			set
			{
				if ((this._Accessible_Untill != value))
				{
					this.OnAccessible_UntillChanging(value);
					this.SendPropertyChanging();
					this._Accessible_Untill = value;
					this.SendPropertyChanged("Accessible_Untill");
					this.OnAccessible_UntillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceAllocation", Storage="_ResourceAllocations", ThisKey="ID", OtherKey="Res_Resource_ID")]
		public EntitySet<ResourceAllocation> ResourceAllocations
		{
			get
			{
				return this._ResourceAllocations;
			}
			set
			{
				this._ResourceAllocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceAllocation1", Storage="_ResourceAllocations1", ThisKey="ID", OtherKey="Resource_ID")]
		public EntitySet<ResourceAllocation> ResourceAllocations1
		{
			get
			{
				return this._ResourceAllocations1;
			}
			set
			{
				this._ResourceAllocations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceAttribute", Storage="_ResourceAttributes", ThisKey="ID", OtherKey="Resource_ID")]
		public EntitySet<ResourceAttribute> ResourceAttributes
		{
			get
			{
				return this._ResourceAttributes;
			}
			set
			{
				this._ResourceAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceKind_Resource", Storage="_ResourceKind", ThisKey="ResourceKind_ID", OtherKey="ID", IsForeignKey=true)]
		public ResourceKind ResourceKind
		{
			get
			{
				return this._ResourceKind.Entity;
			}
			set
			{
				ResourceKind previousValue = this._ResourceKind.Entity;
				if (((previousValue != value) 
							|| (this._ResourceKind.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceKind.Entity = null;
						previousValue.Resources.Remove(this);
					}
					this._ResourceKind.Entity = value;
					if ((value != null))
					{
						value.Resources.Add(this);
						this._ResourceKind_ID = value.ID;
					}
					else
					{
						this._ResourceKind_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourceKind");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceAllocations(ResourceAllocation entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_ResourceAllocations(ResourceAllocation entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
		
		private void attach_ResourceAllocations1(ResourceAllocation entity)
		{
			this.SendPropertyChanging();
			entity.Resource1 = this;
		}
		
		private void detach_ResourceAllocations1(ResourceAllocation entity)
		{
			this.SendPropertyChanging();
			entity.Resource1 = null;
		}
		
		private void attach_ResourceAttributes(ResourceAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_ResourceAttributes(ResourceAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceAllocation")]
	public partial class ResourceAllocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Resource_ID;
		
		private System.Nullable<int> _Res_Resource_ID;
		
		private System.Nullable<int> _Activity_ID;
		
		private System.DateTime _Occupied_From;
		
		private System.Nullable<System.DateTime> _Occupied_Untill;
		
		private EntitySet<ConsumedResourceAttribute> _ConsumedResourceAttributes;
		
		private EntityRef<Resource> _Resource;
		
		private EntityRef<Resource> _Resource1;
		
		private EntityRef<Activity> _Activity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnResource_IDChanging(System.Nullable<int> value);
    partial void OnResource_IDChanged();
    partial void OnRes_Resource_IDChanging(System.Nullable<int> value);
    partial void OnRes_Resource_IDChanged();
    partial void OnActivity_IDChanging(System.Nullable<int> value);
    partial void OnActivity_IDChanged();
    partial void OnOccupied_FromChanging(System.DateTime value);
    partial void OnOccupied_FromChanged();
    partial void OnOccupied_UntillChanging(System.Nullable<System.DateTime> value);
    partial void OnOccupied_UntillChanged();
    #endregion
		
		public ResourceAllocation()
		{
			this._ConsumedResourceAttributes = new EntitySet<ConsumedResourceAttribute>(new Action<ConsumedResourceAttribute>(this.attach_ConsumedResourceAttributes), new Action<ConsumedResourceAttribute>(this.detach_ConsumedResourceAttributes));
			this._Resource = default(EntityRef<Resource>);
			this._Resource1 = default(EntityRef<Resource>);
			this._Activity = default(EntityRef<Activity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Resource_ID", DbType="Int")]
		public System.Nullable<int> Resource_ID
		{
			get
			{
				return this._Resource_ID;
			}
			set
			{
				if ((this._Resource_ID != value))
				{
					if (this._Resource1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResource_IDChanging(value);
					this.SendPropertyChanging();
					this._Resource_ID = value;
					this.SendPropertyChanged("Resource_ID");
					this.OnResource_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Res_Resource_ID", DbType="Int")]
		public System.Nullable<int> Res_Resource_ID
		{
			get
			{
				return this._Res_Resource_ID;
			}
			set
			{
				if ((this._Res_Resource_ID != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRes_Resource_IDChanging(value);
					this.SendPropertyChanging();
					this._Res_Resource_ID = value;
					this.SendPropertyChanged("Res_Resource_ID");
					this.OnRes_Resource_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activity_ID", DbType="Int")]
		public System.Nullable<int> Activity_ID
		{
			get
			{
				return this._Activity_ID;
			}
			set
			{
				if ((this._Activity_ID != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivity_IDChanging(value);
					this.SendPropertyChanging();
					this._Activity_ID = value;
					this.SendPropertyChanged("Activity_ID");
					this.OnActivity_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupied_From", DbType="DateTime NOT NULL")]
		public System.DateTime Occupied_From
		{
			get
			{
				return this._Occupied_From;
			}
			set
			{
				if ((this._Occupied_From != value))
				{
					this.OnOccupied_FromChanging(value);
					this.SendPropertyChanging();
					this._Occupied_From = value;
					this.SendPropertyChanged("Occupied_From");
					this.OnOccupied_FromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupied_Untill", DbType="DateTime")]
		public System.Nullable<System.DateTime> Occupied_Untill
		{
			get
			{
				return this._Occupied_Untill;
			}
			set
			{
				if ((this._Occupied_Untill != value))
				{
					this.OnOccupied_UntillChanging(value);
					this.SendPropertyChanging();
					this._Occupied_Untill = value;
					this.SendPropertyChanged("Occupied_Untill");
					this.OnOccupied_UntillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceAllocation_ConsumedResourceAttribute", Storage="_ConsumedResourceAttributes", ThisKey="ID", OtherKey="ResourceAllocation_ID")]
		public EntitySet<ConsumedResourceAttribute> ConsumedResourceAttributes
		{
			get
			{
				return this._ConsumedResourceAttributes;
			}
			set
			{
				this._ConsumedResourceAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceAllocation", Storage="_Resource", ThisKey="Res_Resource_ID", OtherKey="ID", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.ResourceAllocations.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.ResourceAllocations.Add(this);
						this._Res_Resource_ID = value.ID;
					}
					else
					{
						this._Res_Resource_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceAllocation1", Storage="_Resource1", ThisKey="Resource_ID", OtherKey="ID", IsForeignKey=true)]
		public Resource Resource1
		{
			get
			{
				return this._Resource1.Entity;
			}
			set
			{
				Resource previousValue = this._Resource1.Entity;
				if (((previousValue != value) 
							|| (this._Resource1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource1.Entity = null;
						previousValue.ResourceAllocations1.Remove(this);
					}
					this._Resource1.Entity = value;
					if ((value != null))
					{
						value.ResourceAllocations1.Add(this);
						this._Resource_ID = value.ID;
					}
					else
					{
						this._Resource_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Resource1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_ResourceAllocation", Storage="_Activity", ThisKey="Activity_ID", OtherKey="ID", IsForeignKey=true)]
		public Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.ResourceAllocations.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.ResourceAllocations.Add(this);
						this._Activity_ID = value.ID;
					}
					else
					{
						this._Activity_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConsumedResourceAttributes(ConsumedResourceAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourceAllocation = this;
		}
		
		private void detach_ConsumedResourceAttributes(ConsumedResourceAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourceAllocation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceAttribute")]
	public partial class ResourceAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Attribute_ID;
		
		private System.Nullable<int> _Resource_ID;
		
		private System.Nullable<int> _ConsumedResourceAttribute_ID;
		
		private int _Value;
		
		private int _Max_Value;
		
		private EntityRef<Resource> _Resource;
		
		private EntityRef<Attribute> _Attribute;
		
		private EntityRef<ConsumedResourceAttribute> _ConsumedResourceAttribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAttribute_IDChanging(System.Nullable<int> value);
    partial void OnAttribute_IDChanged();
    partial void OnResource_IDChanging(System.Nullable<int> value);
    partial void OnResource_IDChanged();
    partial void OnConsumedResourceAttribute_IDChanging(System.Nullable<int> value);
    partial void OnConsumedResourceAttribute_IDChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnMax_ValueChanging(int value);
    partial void OnMax_ValueChanged();
    #endregion
		
		public ResourceAttribute()
		{
			this._Resource = default(EntityRef<Resource>);
			this._Attribute = default(EntityRef<Attribute>);
			this._ConsumedResourceAttribute = default(EntityRef<ConsumedResourceAttribute>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attribute_ID", DbType="Int")]
		public System.Nullable<int> Attribute_ID
		{
			get
			{
				return this._Attribute_ID;
			}
			set
			{
				if ((this._Attribute_ID != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttribute_IDChanging(value);
					this.SendPropertyChanging();
					this._Attribute_ID = value;
					this.SendPropertyChanged("Attribute_ID");
					this.OnAttribute_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Resource_ID", DbType="Int")]
		public System.Nullable<int> Resource_ID
		{
			get
			{
				return this._Resource_ID;
			}
			set
			{
				if ((this._Resource_ID != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResource_IDChanging(value);
					this.SendPropertyChanging();
					this._Resource_ID = value;
					this.SendPropertyChanged("Resource_ID");
					this.OnResource_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsumedResourceAttribute_ID", DbType="Int")]
		public System.Nullable<int> ConsumedResourceAttribute_ID
		{
			get
			{
				return this._ConsumedResourceAttribute_ID;
			}
			set
			{
				if ((this._ConsumedResourceAttribute_ID != value))
				{
					if (this._ConsumedResourceAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConsumedResourceAttribute_IDChanging(value);
					this.SendPropertyChanging();
					this._ConsumedResourceAttribute_ID = value;
					this.SendPropertyChanged("ConsumedResourceAttribute_ID");
					this.OnConsumedResourceAttribute_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Max Value]", Storage="_Max_Value", DbType="Int NOT NULL")]
		public int Max_Value
		{
			get
			{
				return this._Max_Value;
			}
			set
			{
				if ((this._Max_Value != value))
				{
					this.OnMax_ValueChanging(value);
					this.SendPropertyChanging();
					this._Max_Value = value;
					this.SendPropertyChanged("Max_Value");
					this.OnMax_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceAttribute", Storage="_Resource", ThisKey="Resource_ID", OtherKey="ID", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.ResourceAttributes.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.ResourceAttributes.Add(this);
						this._Resource_ID = value.ID;
					}
					else
					{
						this._Resource_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_ResourceAttribute", Storage="_Attribute", ThisKey="Attribute_ID", OtherKey="ID", IsForeignKey=true)]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.ResourceAttributes.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.ResourceAttributes.Add(this);
						this._Attribute_ID = value.ID;
					}
					else
					{
						this._Attribute_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConsumedResourceAttribute_ResourceAttribute", Storage="_ConsumedResourceAttribute", ThisKey="ConsumedResourceAttribute_ID", OtherKey="ID", IsForeignKey=true)]
		public ConsumedResourceAttribute ConsumedResourceAttribute
		{
			get
			{
				return this._ConsumedResourceAttribute.Entity;
			}
			set
			{
				ConsumedResourceAttribute previousValue = this._ConsumedResourceAttribute.Entity;
				if (((previousValue != value) 
							|| (this._ConsumedResourceAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConsumedResourceAttribute.Entity = null;
						previousValue.ResourceAttributes.Remove(this);
					}
					this._ConsumedResourceAttribute.Entity = value;
					if ((value != null))
					{
						value.ResourceAttributes.Add(this);
						this._ConsumedResourceAttribute_ID = value.ID;
					}
					else
					{
						this._ConsumedResourceAttribute_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ConsumedResourceAttribute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceKind")]
	public partial class ResourceKind : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Res_ResourceKind_ID;
		
		private string _Title;
		
		private EntitySet<ResourceKindAttribute> _ResourceKindAttributes;
		
		private EntitySet<Resource> _Resources;
		
		private EntitySet<ResourceKind> _ResourceKinds;
		
		private EntityRef<ResourceKind> _ResourceKind1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRes_ResourceKind_IDChanging(System.Nullable<int> value);
    partial void OnRes_ResourceKind_IDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public ResourceKind()
		{
			this._ResourceKindAttributes = new EntitySet<ResourceKindAttribute>(new Action<ResourceKindAttribute>(this.attach_ResourceKindAttributes), new Action<ResourceKindAttribute>(this.detach_ResourceKindAttributes));
			this._Resources = new EntitySet<Resource>(new Action<Resource>(this.attach_Resources), new Action<Resource>(this.detach_Resources));
			this._ResourceKinds = new EntitySet<ResourceKind>(new Action<ResourceKind>(this.attach_ResourceKinds), new Action<ResourceKind>(this.detach_ResourceKinds));
			this._ResourceKind1 = default(EntityRef<ResourceKind>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Res_ResourceKind_ID", DbType="Int")]
		public System.Nullable<int> Res_ResourceKind_ID
		{
			get
			{
				return this._Res_ResourceKind_ID;
			}
			set
			{
				if ((this._Res_ResourceKind_ID != value))
				{
					if (this._ResourceKind1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRes_ResourceKind_IDChanging(value);
					this.SendPropertyChanging();
					this._Res_ResourceKind_ID = value;
					this.SendPropertyChanged("Res_ResourceKind_ID");
					this.OnRes_ResourceKind_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceKind_ResourceKindAttribute", Storage="_ResourceKindAttributes", ThisKey="ID", OtherKey="ResourceKind_ID")]
		public EntitySet<ResourceKindAttribute> ResourceKindAttributes
		{
			get
			{
				return this._ResourceKindAttributes;
			}
			set
			{
				this._ResourceKindAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceKind_Resource", Storage="_Resources", ThisKey="ID", OtherKey="ResourceKind_ID")]
		public EntitySet<Resource> Resources
		{
			get
			{
				return this._Resources;
			}
			set
			{
				this._Resources.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceKind_ResourceKind", Storage="_ResourceKinds", ThisKey="ID", OtherKey="Res_ResourceKind_ID")]
		public EntitySet<ResourceKind> ResourceKinds
		{
			get
			{
				return this._ResourceKinds;
			}
			set
			{
				this._ResourceKinds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceKind_ResourceKind", Storage="_ResourceKind1", ThisKey="Res_ResourceKind_ID", OtherKey="ID", IsForeignKey=true)]
		public ResourceKind ResourceKind1
		{
			get
			{
				return this._ResourceKind1.Entity;
			}
			set
			{
				ResourceKind previousValue = this._ResourceKind1.Entity;
				if (((previousValue != value) 
							|| (this._ResourceKind1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceKind1.Entity = null;
						previousValue.ResourceKinds.Remove(this);
					}
					this._ResourceKind1.Entity = value;
					if ((value != null))
					{
						value.ResourceKinds.Add(this);
						this._Res_ResourceKind_ID = value.ID;
					}
					else
					{
						this._Res_ResourceKind_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourceKind1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceKindAttributes(ResourceKindAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourceKind = this;
		}
		
		private void detach_ResourceKindAttributes(ResourceKindAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ResourceKind = null;
		}
		
		private void attach_Resources(Resource entity)
		{
			this.SendPropertyChanging();
			entity.ResourceKind = this;
		}
		
		private void detach_Resources(Resource entity)
		{
			this.SendPropertyChanging();
			entity.ResourceKind = null;
		}
		
		private void attach_ResourceKinds(ResourceKind entity)
		{
			this.SendPropertyChanging();
			entity.ResourceKind1 = this;
		}
		
		private void detach_ResourceKinds(ResourceKind entity)
		{
			this.SendPropertyChanging();
			entity.ResourceKind1 = null;
		}
	}
}
#pragma warning restore 1591
